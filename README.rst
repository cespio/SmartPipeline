SmartPipeline
-------------

A framework for fast developing scalable data pipelines following a simple design pattern

.. figure:: https://imgs.xkcd.com/comics/data_pipeline.png
   :alt: pipeline comic

   from https://xkcd.com

.. image:: https://readthedocs.org/projects/smartpipeline/badge/?version=stable
   :target: https://smartpipeline.readthedocs.io/en/stable/?badge=stable
   :alt: Documentation Status

.. documentation-marker

Imagine you have to perform several processes on data, a typical *Task Queues* application.
SmartPipeline give you the tools to design and formalize simple data pipelines,
in which tasks are sequentially encapsulated in pipeline stages.

Stages can run concurrently and scale on heavy tasks, they can process batch of items at once,
executions and errors are monitored by the pipeline.

Is is a framework for fast and clean engineering sequences of data operations:
an optimal solution for fast data analysis prototypes that can be immediately ready for production.

Install
~~~~~~~

Install from PyPI, no dependencies will be installed:

.. code-block:: bash

   pip install smartpipeline

Writing your pipeline
~~~~~~~~~~~~~~~~~~~~~

Just create a ``Pipeline`` and add stages with ``append_stage()`` method.
You can set your custom source stage that will ingest items into the pipeline with ``set_source()``,
processed items  will be obtained by executing pipeline ``run()``.
You can eventually process single items with ``process()`` or ``process_async()``
(in order to obtain the resulting item from the latter ``get_item()`` must be called).
Several other methods allow to configure the pipeline.

Stages can be defined extending the ``Stage`` or ``BatchStage`` classes,
sources by extending the ``Source`` class.
Batch stages allow to process more items at once.
Different item types can be defined extending the ``DataItem`` class,
the actual item data is carried in its ``payload`` attribute, a read-only serializable dictionary.
Other item methods allow to enrich it with metadata.

Specific errors can be generated by stages and managed by the pipeline.
``Error`` instances are stage errors that do not interrupt an item processing through the pipeline,
they have to be explicitly raised.
A ``CriticalError`` is raised for any non captured exception, or may be raised explicitly:
it stops the processing of an item so that the pipeline starts with the next one.

`Read the documentation <https://smartpipeline.readthedocs.io>`_ for an exhaustive tutorial
and examples.